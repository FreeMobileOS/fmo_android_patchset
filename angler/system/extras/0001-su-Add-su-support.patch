From 3de52b7ebdfbec1106e44bcd35f707fdd06c54ef Mon Sep 17 00:00:00 2001
From: Satish Patel <tosatishpatel@gmail.com>
Date: Fri, 7 Dec 2018 09:33:48 +0530
Subject: [PATCH] [su]: Add su support

su now can be controlled using developer options

Change-Id: I96047118a2ff9a8dadb03b63d0769aa3fb21257f
Signed-off-by: Satish Patel <tosatishpatel@gmail.com>
---
 su/.clang-format             |  11 +
 su/.gitignore                |   9 +
 su/Android.mk                |  25 +-
 su/LICENSE                   |  13 +
 su/MODULE_LICENSE_APACHE2    |   0
 su/NOTICE                    | 190 -------------
 su/binder/appops-wrapper.cpp |  33 +++
 su/binder/pm-wrapper.c       |  52 ++++
 su/binder/pm-wrapper.h       |   6 +
 su/daemon.c                  | 631 +++++++++++++++++++++++++++++++++++++++++++
 su/policy                    | Bin 0 -> 411698 bytes
 su/pts.c                     | 334 +++++++++++++++++++++++
 su/pts.h                     | 116 ++++++++
 su/su.c                      | 519 +++++++++++++++++++++++++++++++++++
 su/su.cpp                    | 144 ----------
 su/su.h                      | 115 ++++++++
 su/superuser.rc              |  18 ++
 su/utils.c                   |  54 ++++
 su/utils.h                   |  27 ++
 19 files changed, 1957 insertions(+), 340 deletions(-)
 create mode 100644 su/.clang-format
 create mode 100644 su/.gitignore
 create mode 100644 su/LICENSE
 delete mode 100644 su/MODULE_LICENSE_APACHE2
 delete mode 100644 su/NOTICE
 create mode 100644 su/binder/appops-wrapper.cpp
 create mode 100644 su/binder/pm-wrapper.c
 create mode 100644 su/binder/pm-wrapper.h
 create mode 100644 su/daemon.c
 create mode 100644 su/policy
 create mode 100644 su/pts.c
 create mode 100644 su/pts.h
 create mode 100644 su/su.c
 delete mode 100644 su/su.cpp
 create mode 100644 su/su.h
 create mode 100644 su/superuser.rc
 create mode 100644 su/utils.c
 create mode 100644 su/utils.h

diff --git a/su/.clang-format b/su/.clang-format
new file mode 100644
index 0000000..ae4a451
--- /dev/null
+++ b/su/.clang-format
@@ -0,0 +1,11 @@
+BasedOnStyle: Google
+AccessModifierOffset: -2
+AllowShortFunctionsOnASingleLine: Inline
+ColumnLimit: 100
+CommentPragmas: NOLINT:.*
+DerivePointerAlignment: false
+IndentWidth: 4
+PointerAlignment: Left
+TabWidth: 4
+UseTab: Never
+PenaltyExcessCharacter: 32
diff --git a/su/.gitignore b/su/.gitignore
new file mode 100644
index 0000000..8fbf940
--- /dev/null
+++ b/su/.gitignore
@@ -0,0 +1,9 @@
+bin
+armeabi
+x86
+obj
+local.properties
+gen
+.DS_Store
+.settings
+libs
diff --git a/su/Android.mk b/su/Android.mk
index 92ad5e3..20cc1fb 100644
--- a/su/Android.mk
+++ b/su/Android.mk
@@ -1,13 +1,26 @@
-LOCAL_PATH:= $(call my-dir)
+# Root AOSP source makefile
+# su is built here, and 
+LOCAL_PATH := $(call my-dir)
+
 include $(CLEAR_VARS)
 
-LOCAL_CFLAGS := -Wall -Werror
+LOCAL_MODULE := su
+LOCAL_MODULE_TAGS := optional
+LOCAL_SHARED_LIBRARIES := \
+    libbinder \
+    libcutils \
+    liblog \
+    libutils \
 
-LOCAL_SRC_FILES:= su.cpp
+LOCAL_SRC_FILES := su.c daemon.c utils.c pts.c
+LOCAL_SRC_FILES += binder/appops-wrapper.cpp binder/pm-wrapper.c
+LOCAL_CFLAGS += -Werror -Wall
+LOCAL_MODULE_PATH := $(TARGET_ROOT_OUT_SBIN)
 
-LOCAL_MODULE:= su
+LOCAL_INIT_RC := superuser.rc
 
-LOCAL_MODULE_PATH := $(TARGET_OUT_OPTIONAL_EXECUTABLES)
-LOCAL_MODULE_TAGS := debug
+LOCAL_TIDY_FLAGS := -warnings-as-errors=clang-analyzer-security*,cert-*
+LOCAL_TIDY_CHECKS := -*,clang-analyzer-security*,cert-*
+LOCAL_TIDY := true
 
 include $(BUILD_EXECUTABLE)
diff --git a/su/LICENSE b/su/LICENSE
new file mode 100644
index 0000000..0392aea
--- /dev/null
+++ b/su/LICENSE
@@ -0,0 +1,13 @@
+Copyright 2013 Koushik Dutta (2013)
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
\ No newline at end of file
diff --git a/su/MODULE_LICENSE_APACHE2 b/su/MODULE_LICENSE_APACHE2
deleted file mode 100644
index e69de29..0000000
diff --git a/su/NOTICE b/su/NOTICE
deleted file mode 100644
index c5b1efa..0000000
--- a/su/NOTICE
+++ /dev/null
@@ -1,190 +0,0 @@
-
-   Copyright (c) 2005-2008, The Android Open Source Project
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-
-
-                                 Apache License
-                           Version 2.0, January 2004
-                        http://www.apache.org/licenses/
-
-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
-
-   1. Definitions.
-
-      "License" shall mean the terms and conditions for use, reproduction,
-      and distribution as defined by Sections 1 through 9 of this document.
-
-      "Licensor" shall mean the copyright owner or entity authorized by
-      the copyright owner that is granting the License.
-
-      "Legal Entity" shall mean the union of the acting entity and all
-      other entities that control, are controlled by, or are under common
-      control with that entity. For the purposes of this definition,
-      "control" means (i) the power, direct or indirect, to cause the
-      direction or management of such entity, whether by contract or
-      otherwise, or (ii) ownership of fifty percent (50%) or more of the
-      outstanding shares, or (iii) beneficial ownership of such entity.
-
-      "You" (or "Your") shall mean an individual or Legal Entity
-      exercising permissions granted by this License.
-
-      "Source" form shall mean the preferred form for making modifications,
-      including but not limited to software source code, documentation
-      source, and configuration files.
-
-      "Object" form shall mean any form resulting from mechanical
-      transformation or translation of a Source form, including but
-      not limited to compiled object code, generated documentation,
-      and conversions to other media types.
-
-      "Work" shall mean the work of authorship, whether in Source or
-      Object form, made available under the License, as indicated by a
-      copyright notice that is included in or attached to the work
-      (an example is provided in the Appendix below).
-
-      "Derivative Works" shall mean any work, whether in Source or Object
-      form, that is based on (or derived from) the Work and for which the
-      editorial revisions, annotations, elaborations, or other modifications
-      represent, as a whole, an original work of authorship. For the purposes
-      of this License, Derivative Works shall not include works that remain
-      separable from, or merely link (or bind by name) to the interfaces of,
-      the Work and Derivative Works thereof.
-
-      "Contribution" shall mean any work of authorship, including
-      the original version of the Work and any modifications or additions
-      to that Work or Derivative Works thereof, that is intentionally
-      submitted to Licensor for inclusion in the Work by the copyright owner
-      or by an individual or Legal Entity authorized to submit on behalf of
-      the copyright owner. For the purposes of this definition, "submitted"
-      means any form of electronic, verbal, or written communication sent
-      to the Licensor or its representatives, including but not limited to
-      communication on electronic mailing lists, source code control systems,
-      and issue tracking systems that are managed by, or on behalf of, the
-      Licensor for the purpose of discussing and improving the Work, but
-      excluding communication that is conspicuously marked or otherwise
-      designated in writing by the copyright owner as "Not a Contribution."
-
-      "Contributor" shall mean Licensor and any individual or Legal Entity
-      on behalf of whom a Contribution has been received by Licensor and
-      subsequently incorporated within the Work.
-
-   2. Grant of Copyright License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      copyright license to reproduce, prepare Derivative Works of,
-      publicly display, publicly perform, sublicense, and distribute the
-      Work and such Derivative Works in Source or Object form.
-
-   3. Grant of Patent License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      (except as stated in this section) patent license to make, have made,
-      use, offer to sell, sell, import, and otherwise transfer the Work,
-      where such license applies only to those patent claims licensable
-      by such Contributor that are necessarily infringed by their
-      Contribution(s) alone or by combination of their Contribution(s)
-      with the Work to which such Contribution(s) was submitted. If You
-      institute patent litigation against any entity (including a
-      cross-claim or counterclaim in a lawsuit) alleging that the Work
-      or a Contribution incorporated within the Work constitutes direct
-      or contributory patent infringement, then any patent licenses
-      granted to You under this License for that Work shall terminate
-      as of the date such litigation is filed.
-
-   4. Redistribution. You may reproduce and distribute copies of the
-      Work or Derivative Works thereof in any medium, with or without
-      modifications, and in Source or Object form, provided that You
-      meet the following conditions:
-
-      (a) You must give any other recipients of the Work or
-          Derivative Works a copy of this License; and
-
-      (b) You must cause any modified files to carry prominent notices
-          stating that You changed the files; and
-
-      (c) You must retain, in the Source form of any Derivative Works
-          that You distribute, all copyright, patent, trademark, and
-          attribution notices from the Source form of the Work,
-          excluding those notices that do not pertain to any part of
-          the Derivative Works; and
-
-      (d) If the Work includes a "NOTICE" text file as part of its
-          distribution, then any Derivative Works that You distribute must
-          include a readable copy of the attribution notices contained
-          within such NOTICE file, excluding those notices that do not
-          pertain to any part of the Derivative Works, in at least one
-          of the following places: within a NOTICE text file distributed
-          as part of the Derivative Works; within the Source form or
-          documentation, if provided along with the Derivative Works; or,
-          within a display generated by the Derivative Works, if and
-          wherever such third-party notices normally appear. The contents
-          of the NOTICE file are for informational purposes only and
-          do not modify the License. You may add Your own attribution
-          notices within Derivative Works that You distribute, alongside
-          or as an addendum to the NOTICE text from the Work, provided
-          that such additional attribution notices cannot be construed
-          as modifying the License.
-
-      You may add Your own copyright statement to Your modifications and
-      may provide additional or different license terms and conditions
-      for use, reproduction, or distribution of Your modifications, or
-      for any such Derivative Works as a whole, provided Your use,
-      reproduction, and distribution of the Work otherwise complies with
-      the conditions stated in this License.
-
-   5. Submission of Contributions. Unless You explicitly state otherwise,
-      any Contribution intentionally submitted for inclusion in the Work
-      by You to the Licensor shall be under the terms and conditions of
-      this License, without any additional terms or conditions.
-      Notwithstanding the above, nothing herein shall supersede or modify
-      the terms of any separate license agreement you may have executed
-      with Licensor regarding such Contributions.
-
-   6. Trademarks. This License does not grant permission to use the trade
-      names, trademarks, service marks, or product names of the Licensor,
-      except as required for reasonable and customary use in describing the
-      origin of the Work and reproducing the content of the NOTICE file.
-
-   7. Disclaimer of Warranty. Unless required by applicable law or
-      agreed to in writing, Licensor provides the Work (and each
-      Contributor provides its Contributions) on an "AS IS" BASIS,
-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-      implied, including, without limitation, any warranties or conditions
-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
-      PARTICULAR PURPOSE. You are solely responsible for determining the
-      appropriateness of using or redistributing the Work and assume any
-      risks associated with Your exercise of permissions under this License.
-
-   8. Limitation of Liability. In no event and under no legal theory,
-      whether in tort (including negligence), contract, or otherwise,
-      unless required by applicable law (such as deliberate and grossly
-      negligent acts) or agreed to in writing, shall any Contributor be
-      liable to You for damages, including any direct, indirect, special,
-      incidental, or consequential damages of any character arising as a
-      result of this License or out of the use or inability to use the
-      Work (including but not limited to damages for loss of goodwill,
-      work stoppage, computer failure or malfunction, or any and all
-      other commercial damages or losses), even if such Contributor
-      has been advised of the possibility of such damages.
-
-   9. Accepting Warranty or Additional Liability. While redistributing
-      the Work or Derivative Works thereof, You may choose to offer,
-      and charge a fee for, acceptance of support, warranty, indemnity,
-      or other liability obligations and/or rights consistent with this
-      License. However, in accepting such obligations, You may act only
-      on Your own behalf and on Your sole responsibility, not on behalf
-      of any other Contributor, and only if You agree to indemnify,
-      defend, and hold each Contributor harmless for any liability
-      incurred by, or claims asserted against, such Contributor by reason
-      of your accepting any such warranty or additional liability.
-
-   END OF TERMS AND CONDITIONS
-
diff --git a/su/binder/appops-wrapper.cpp b/su/binder/appops-wrapper.cpp
new file mode 100644
index 0000000..609fb1d
--- /dev/null
+++ b/su/binder/appops-wrapper.cpp
@@ -0,0 +1,33 @@
+#define LOG_NDEBUG 0
+#define LOG_TAG "su"
+
+#include <binder/AppOpsManager.h>
+#include <log/log.h>
+
+using android::AppOpsManager;
+using android::String16;
+
+extern "C" {
+
+int appops_start_op_su(int uid, const char* pkgName) {
+    ALOGD("Checking whether app [uid:%d, pkgName: %s] is allowed to be root", uid, pkgName);
+
+    AppOpsManager ops;
+    int mode = ops.startOpNoThrow(AppOpsManager::OP_SU, uid, String16(pkgName), /*startIfModeDefault*/ false);
+    if (mode == AppOpsManager::MODE_ALLOWED) {
+        ALOGD("Privilege elevation allowed by appops");
+        return 0;
+    }
+
+    ALOGD("Privilege elevation denied by appops");
+    return 1;
+}
+
+void appops_finish_op_su(int uid, const char* pkgName) {
+    ALOGD("Finishing su operation for app [uid:%d, pkgName: %s]", uid, pkgName);
+    AppOpsManager* ops = new AppOpsManager();
+    ops->finishOp(AppOpsManager::OP_SU, uid, String16(pkgName));
+    delete ops;
+}
+
+}
diff --git a/su/binder/pm-wrapper.c b/su/binder/pm-wrapper.c
new file mode 100644
index 0000000..c847904
--- /dev/null
+++ b/su/binder/pm-wrapper.c
@@ -0,0 +1,52 @@
+#include <errno.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "../utils.h"
+
+#define PACKAGE_LIST_PATH "/data/system/packages.list"
+#define PACKAGE_NAME_MAX_LEN (1 << 16)
+
+/* Tries to resolve a package name from a uid via the packages list file.
+ *
+ * If there is no matching uid, it will return an empty string which can
+ * be resolved by appops in some cases (i.e. apps with uid = 0, uid = AID_SHELL).
+ *
+ * Since packages may share UID, this function will return the first present
+ * in packages.list.
+ */
+char* resolve_package_name(int uid) {
+    char* package_name = NULL;
+    char* packages = read_file(PACKAGE_LIST_PATH);
+
+    if (packages == NULL) {
+        return NULL;
+    }
+
+    char* p = packages;
+    while (*p) {
+        char* line_end = strstr(p, "\n");
+        if (line_end == NULL)
+            break;
+
+        char* token;
+        char* pkgName = strtok_r(p, " ", &token);
+        if (pkgName != NULL) {
+            char* pkgUid = strtok_r(NULL, " ", &token);
+            if (pkgUid != NULL) {
+                char* endptr;
+                errno = 0;
+                int pkgUidInt = strtoul(pkgUid, &endptr, 10);
+                if ((errno == 0 && endptr != NULL && !(*endptr)) && pkgUidInt == uid) {
+                    package_name = strdup(pkgName);
+                    break;
+                }
+            }
+        }
+        p = ++line_end;
+    }
+
+    free(packages);
+    return package_name;
+}
diff --git a/su/binder/pm-wrapper.h b/su/binder/pm-wrapper.h
new file mode 100644
index 0000000..37b3390
--- /dev/null
+++ b/su/binder/pm-wrapper.h
@@ -0,0 +1,6 @@
+#ifndef _HAS_PM_WRAPPER_H
+#define _HAS_PM_WRAPPER_H
+
+char* resolve_package_name(int uid);
+
+#endif
diff --git a/su/daemon.c b/su/daemon.c
new file mode 100644
index 0000000..6347943
--- /dev/null
+++ b/su/daemon.c
@@ -0,0 +1,631 @@
+/*
+** Copyright 2010, Adam Shanks (@ChainsDD)
+** Copyright 2008, Zinx Verituse (@zinxv)
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+#define LOG_NDEBUG 0
+#define _GNU_SOURCE /* for unshare() */
+
+#include <stdlib.h>
+#include <sys/mount.h>
+#include <sys/socket.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/un.h>
+#include <sys/wait.h>
+#include <unistd.h>
+
+#include <cutils/multiuser.h>
+#include <log/log.h>
+
+#include "pts.h"
+#include "su.h"
+#include "utils.h"
+
+int is_daemon = 0;
+int daemon_from_uid = 0;
+int daemon_from_pid = 0;
+
+// Constants for the atty bitfield
+#define ATTY_IN     1
+#define ATTY_OUT    2
+#define ATTY_ERR    4
+
+/*
+ * Receive a file descriptor from a Unix socket.
+ * Contributed by @mkasick
+ *
+ * Returns the file descriptor on success, or -1 if a file
+ * descriptor was not actually included in the message
+ *
+ * On error the function terminates by calling exit(-1)
+ */
+static int recv_fd(int sockfd) {
+    ALOGE("HACK: recv fd");
+    // Need to receive data from the message, otherwise don't care about it.
+    char iovbuf;
+
+    struct iovec iov = {
+        .iov_base = &iovbuf,
+        .iov_len  = 1,
+    };
+
+    char cmsgbuf[CMSG_SPACE(sizeof(int))];
+
+    struct msghdr msg = {
+        .msg_iov        = &iov,
+        .msg_iovlen     = 1,
+        .msg_control    = cmsgbuf,
+        .msg_controllen = sizeof(cmsgbuf),
+    };
+
+    if (recvmsg(sockfd, &msg, MSG_WAITALL) != 1) {
+        goto error;
+    }
+
+    // Was a control message actually sent?
+    switch (msg.msg_controllen) {
+    case 0:
+        // No, so the file descriptor was closed and won't be used.
+        return -1;
+    case sizeof(cmsgbuf):
+        // Yes, grab the file descriptor from it.
+        break;
+    default:
+        goto error;
+    }
+
+    struct cmsghdr* cmsg = CMSG_FIRSTHDR(&msg);
+
+    if (cmsg             == NULL                  ||
+        cmsg->cmsg_len   != CMSG_LEN(sizeof(int)) ||
+        cmsg->cmsg_level != SOL_SOCKET            ||
+        cmsg->cmsg_type  != SCM_RIGHTS) {
+error:
+        ALOGE("unable to read fd");
+        exit(-1);
+    }
+
+    return *(int*)CMSG_DATA(cmsg);
+}
+
+/*
+ * Send a file descriptor through a Unix socket.
+ * Contributed by @mkasick
+ *
+ * On error the function terminates by calling exit(-1)
+ *
+ * fd may be -1, in which case the dummy data is sent,
+ * but no control message with the FD is sent.
+ */
+static void send_fd(int sockfd, int fd) {
+    // Need to send some data in the message, this will do.
+    struct iovec iov = {
+        .iov_base = "",
+        .iov_len  = 1,
+    };
+
+    struct msghdr msg = {
+        .msg_iov        = &iov,
+        .msg_iovlen     = 1,
+    };
+
+    char cmsgbuf[CMSG_SPACE(sizeof(int))];
+
+    if (fd != -1) {
+        // Is the file descriptor actually open?
+        if (fcntl(fd, F_GETFD) == -1) {
+            if (errno != EBADF) {
+                goto error;
+            }
+            // It's closed, don't send a control message or sendmsg will EBADF.
+        } else {
+            // It's open, send the file descriptor in a control message.
+            msg.msg_control    = cmsgbuf;
+            msg.msg_controllen = sizeof(cmsgbuf);
+
+            struct cmsghdr* cmsg = CMSG_FIRSTHDR(&msg);
+            if (!cmsg) {
+                goto error;
+            }
+
+            cmsg->cmsg_len   = CMSG_LEN(sizeof(int));
+            cmsg->cmsg_level = SOL_SOCKET;
+            cmsg->cmsg_type  = SCM_RIGHTS;
+
+            *(int *)CMSG_DATA(cmsg) = fd;
+        }
+    }
+
+    if (sendmsg(sockfd, &msg, 0) != 1) {
+error:
+        PLOGE("unable to send fd");
+        exit(-1);
+    }
+}
+
+static int read_int(int fd) {
+    int val;
+    int len = read(fd, &val, sizeof(int));
+    if (len != sizeof(int)) {
+        ALOGE("unable to read int: %d", len);
+        exit(-1);
+    }
+    return val;
+}
+
+static void write_int(int fd, int val) {
+    int written = write(fd, &val, sizeof(int));
+    if (written != sizeof(int)) {
+        PLOGE("unable to write int");
+        exit(-1);
+    }
+}
+
+static char* read_string(int fd) {
+    int len = read_int(fd);
+    if (len > PATH_MAX || len < 0) {
+        ALOGE("invalid string length %d", len);
+        exit(-1);
+    }
+    char* val = malloc(sizeof(char) * (len + 1));
+    if (val == NULL) {
+        ALOGE("unable to malloc string");
+        exit(-1);
+    }
+    val[len] = '\0';
+    int amount = read(fd, val, len);
+    if (amount != len) {
+        ALOGE("unable to read string");
+        exit(-1);
+    }
+    return val;
+}
+
+static void write_string(int fd, char* val) {
+    int len = strlen(val);
+    write_int(fd, len);
+    int written = write(fd, val, len);
+    if (written != len) {
+        PLOGE("unable to write string");
+        exit(-1);
+    }
+}
+
+static int run_daemon_child(int infd, int outfd, int errfd, int argc, char** argv) {
+    if (-1 == dup2(outfd, STDOUT_FILENO)) {
+        PLOGE("dup2 child outfd");
+        exit(-1);
+    }
+
+    if (-1 == dup2(errfd, STDERR_FILENO)) {
+        PLOGE("dup2 child errfd");
+        exit(-1);
+    }
+
+    if (-1 == dup2(infd, STDIN_FILENO)) {
+        PLOGE("dup2 child infd");
+        exit(-1);
+    }
+
+    close(infd);
+    close(outfd);
+    close(errfd);
+
+    return su_main(argc, argv, 0);
+}
+
+static int daemon_accept(int fd) {
+    is_daemon = 1;
+    int pid = read_int(fd);
+    int child_result;
+    ALOGE("HACK:remote pid: %d", pid);
+    ALOGD("remote pid: %d", pid);
+    char *pts_slave = read_string(fd);
+    ALOGD("remote pts_slave: %s", pts_slave);
+    daemon_from_pid = read_int(fd);
+    ALOGV("remote req pid: %d", daemon_from_pid);
+
+    struct ucred credentials;
+    socklen_t ucred_length = sizeof(struct ucred);
+    /* fill in the user data structure */
+    if (getsockopt(fd, SOL_SOCKET, SO_PEERCRED, &credentials, &ucred_length)) {
+        ALOGE("could obtain credentials from unix domain socket");
+        exit(-1);
+    }
+
+    daemon_from_uid = credentials.uid;
+
+    // The the FDs for each of the streams
+    int infd  = recv_fd(fd);
+    int outfd = recv_fd(fd);
+    int errfd = recv_fd(fd);
+
+    int argc = read_int(fd);
+    if (argc < 0 || argc > 512) {
+        ALOGE("unable to allocate args: %d", argc);
+        exit(-1);
+    }
+    ALOGV("remote args: %d", argc);
+    char** argv = (char**)malloc(sizeof(char*) * (argc + 1));
+    if (!argv) {
+        ALOGE("unable to allocate memory\n");
+        exit(-1);
+    }
+    argv[argc] = NULL;
+    int i;
+    for (i = 0; i < argc; i++) {
+        argv[i] = read_string(fd);
+    }
+
+    // ack
+    write_int(fd, 1);
+
+    // Fork the child process. The fork has to happen before calling
+    // setsid() and opening the pseudo-terminal so that the parent
+    // is not affected
+    int child = fork();
+    if (child < 0) {
+        for (i = 0; i < argc; i++) {
+            free(argv[i]);
+        }
+        free(argv);
+
+        // fork failed, send a return code and bail out
+        PLOGE("unable to fork");
+        write(fd, &child, sizeof(int));
+        close(fd);
+        return child;
+    }
+
+    if (child != 0) {
+        for (i = 0; i < argc; i++) {
+            free(argv[i]);
+        }
+        free(argv);
+
+        // In parent, wait for the child to exit, and send the exit code
+        // across the wire.
+        int status, code;
+
+        free(pts_slave);
+
+        ALOGD("waiting for child exit");
+        if (waitpid(child, &status, 0) > 0) {
+            code = WEXITSTATUS(status);
+        }
+        else {
+            code = -1;
+        }
+
+        // Is the file descriptor actually open?
+        if (fcntl(fd, F_GETFD) == -1) {
+            if (errno != EBADF) {
+                goto error;
+            }
+        }
+
+        // Pass the return code back to the client
+        ALOGD("sending code");
+        if (send(fd, &code, sizeof(int), MSG_NOSIGNAL) != sizeof(int)) {
+            PLOGE("unable to write exit code");
+        }
+
+        close(fd);
+error:
+        ALOGD("child exited");
+        return code;
+    }
+
+    // We are in the child now
+    // Close the unix socket file descriptor
+    close (fd);
+
+    // Become session leader
+    if (setsid() == (pid_t) -1) {
+        PLOGE("setsid");
+    }
+
+    int ptsfd;
+    if (pts_slave[0]) {
+        // Opening the TTY has to occur after the
+        // fork() and setsid() so that it becomes
+        // our controlling TTY and not the daemon's
+        ptsfd = open(pts_slave, O_RDWR);
+        if (ptsfd == -1) {
+            PLOGE("open(pts_slave) daemon");
+            exit(-1);
+        }
+
+        struct stat st;
+        if (fstat(ptsfd, &st)) {
+            PLOGE("failed to stat pts_slave");
+            exit(-1);
+        }
+
+        if (st.st_uid != credentials.uid) {
+            PLOGE("caller doesn't own proposed PTY");
+            exit(-1);
+        }
+
+        if (!S_ISCHR(st.st_mode)) {
+            PLOGE("proposed PTY isn't a chardev");
+            exit(-1);
+        }
+
+        if (infd < 0)  {
+            ALOGD("daemon: stdin using PTY");
+            infd  = ptsfd;
+        }
+        if (outfd < 0) {
+            ALOGD("daemon: stdout using PTY");
+            outfd = ptsfd;
+        }
+        if (errfd < 0) {
+            ALOGD("daemon: stderr using PTY");
+            errfd = ptsfd;
+        }
+    } else {
+        // TODO: Check system property, if PTYs are disabled,
+        // made infd the CTTY using:
+        // ioctl(infd, TIOCSCTTY, 1);
+    }
+    free(pts_slave);
+
+    child_result = run_daemon_child(infd, outfd, errfd, argc, argv);
+    for (i = 0; i < argc; i++) {
+        free(argv[i]);
+    }
+    free(argv);
+    return child_result;
+}
+
+int run_daemon() {
+    ALOGE("HACK:run_daemon starts");
+    if (getuid() != 0 || getgid() != 0) {
+        PLOGE("daemon requires root. uid/gid not root");
+        return -1;
+    }
+
+    int fd;
+    struct sockaddr_un sun;
+
+    fd = socket(AF_LOCAL, SOCK_STREAM, 0);
+    if (fd < 0) {
+        PLOGE("socket");
+        return -1;
+    }
+    if (fcntl(fd, F_SETFD, FD_CLOEXEC)) {
+        PLOGE("fcntl FD_CLOEXEC");
+        goto err;
+    }
+    ALOGE("HACK:run_daemon starts, socket done");
+
+    memset(&sun, 0, sizeof(sun));
+    sun.sun_family = AF_LOCAL;
+    sprintf(sun.sun_path, "%s/su-daemon", DAEMON_SOCKET_PATH);
+
+    /*
+     * Delete the socket to protect from situations when
+     * something bad occured previously and the kernel reused pid from that process.
+     * Small probability, isn't it.
+     */
+    unlink(sun.sun_path);
+    unlink(DAEMON_SOCKET_PATH);
+
+    int previous_umask = umask(027);
+    mkdir(DAEMON_SOCKET_PATH, 0711);
+
+    if (bind(fd, (struct sockaddr*)&sun, sizeof(sun)) < 0) {
+        PLOGE("daemon bind");
+        goto err;
+    }
+
+    chmod(DAEMON_SOCKET_PATH, 0711);
+    chmod(sun.sun_path, 0666);
+
+    umask(previous_umask);
+
+    if (listen(fd, 10) < 0) {
+        PLOGE("daemon listen");
+        goto err;
+    }
+
+    int client;
+    while ((client = accept(fd, NULL, NULL)) > 0) {
+        if (fork_zero_fucks() == 0) {
+            close(fd);
+            return daemon_accept(client);
+        }
+        else {
+            close(client);
+        }
+    }
+
+    ALOGE("HACK:daemon exiting");
+err:
+    ALOGE("HACK:run_daemon error why");
+    close(fd);
+    return -1;
+}
+
+// List of signals which cause process termination
+static int quit_signals[] = { SIGALRM, SIGHUP, SIGPIPE, SIGQUIT, SIGTERM, SIGINT, 0 };
+
+static void sighandler(__attribute__ ((unused)) int sig) {
+    restore_stdin();
+
+    // Assume we'll only be called before death
+    // See note before sigaction() in set_stdin_raw()
+    //
+    // Now, close all standard I/O to cause the pumps
+    // to exit so we can continue and retrieve the exit
+    // code
+    close(STDIN_FILENO);
+    close(STDOUT_FILENO);
+    close(STDERR_FILENO);
+
+    // Put back all the default handlers
+    struct sigaction act;
+    int i;
+
+    memset(&act, '\0', sizeof(act));
+    act.sa_handler = SIG_DFL;
+    for (i = 0; quit_signals[i]; i++) {
+        if (sigaction(quit_signals[i], &act, NULL) < 0) {
+            PLOGE("Error removing signal handler");
+            continue;
+        }
+    }
+}
+
+/**
+ * Setup signal handlers trap signals which should result in program termination
+ * so that we can restore the terminal to its normal state and retrieve the 
+ * return code.
+ */
+static void setup_sighandlers(void) {
+    struct sigaction act;
+    int i;
+
+    // Install the termination handlers
+    // Note: we're assuming that none of these signal handlers are already trapped.
+    // If they are, we'll need to modify this code to save the previous handler and
+    // call it after we restore stdin to its previous state.
+    memset(&act, '\0', sizeof(act));
+    act.sa_handler = &sighandler;
+    for (i = 0; quit_signals[i]; i++) {
+        if (sigaction(quit_signals[i], &act, NULL) < 0) {
+            PLOGE("Error installing signal handler");
+            continue;
+        }
+    }
+}
+
+int connect_daemon(int argc, char* argv[], int ppid) {
+    ALOGE("HACK: connect daemon");
+    int ptmx = -1;
+    char pts_slave[PATH_MAX];
+
+    struct sockaddr_un sun;
+
+    // Open a socket to the daemon
+    int socketfd = socket(AF_LOCAL, SOCK_STREAM, 0);
+    if (socketfd < 0) {
+        ALOGE("HACK: connect daemon, socket error");
+        PLOGE("socket");
+        exit(-1);
+    }
+    if (fcntl(socketfd, F_SETFD, FD_CLOEXEC)) {
+        ALOGE("HACK: connect daemon, 1socket error");
+        PLOGE("fcntl FD_CLOEXEC");
+        exit(-1);
+    }
+
+    memset(&sun, 0, sizeof(sun));
+    sun.sun_family = AF_LOCAL;
+    sprintf(sun.sun_path, "%s/su-daemon", DAEMON_SOCKET_PATH);
+
+    if (0 != connect(socketfd, (struct sockaddr*)&sun, sizeof(sun))) {
+        ALOGE("HACK: connect daemon, 2socket error");
+        PLOGE("connect");
+        exit(-1);
+    }
+
+    ALOGE("HACK: connecting client:%d,", getpid());
+    ALOGV("connecting client %d", getpid());
+
+    // Determine which one of our streams are attached to a TTY
+    int atty = 0;
+
+    // TODO: Check a system property and never use PTYs if
+    // the property is set.
+    if (isatty(STDIN_FILENO))  atty |= ATTY_IN;
+    if (isatty(STDOUT_FILENO)) atty |= ATTY_OUT;
+    if (isatty(STDERR_FILENO)) atty |= ATTY_ERR;
+
+    ALOGE("HACK: connect daemon, pty check");
+    if (atty) {
+        // We need a PTY. Get one.
+        ALOGE("HACK: connect daemon, pty open");
+        ptmx = pts_open(pts_slave, sizeof(pts_slave));
+        if (ptmx < 0) {
+            PLOGE("pts_open");
+            exit(-1);
+        }
+    } else {
+        ALOGE("HACK: connect daemon, pty slave");
+        pts_slave[0] = '\0';
+    }
+
+    // Send some info to the daemon, starting with our PID
+    write_int(socketfd, getpid());
+    // Send the slave path to the daemon
+    // (This is "" if we're not using PTYs)
+    write_string(socketfd, pts_slave);
+    // Parent PID
+    ALOGE("HACK: connect daemon, write to socket");
+    write_int(socketfd, ppid);
+
+    // Send stdin
+    if (atty & ATTY_IN) {
+        // Using PTY
+        send_fd(socketfd, -1);
+    } else {
+        send_fd(socketfd, STDIN_FILENO);
+    }
+
+    // Send stdout
+    if (atty & ATTY_OUT) {
+        // Forward SIGWINCH
+        watch_sigwinch_async(STDOUT_FILENO, ptmx);
+
+        // Using PTY
+        send_fd(socketfd, -1);
+    } else {
+        send_fd(socketfd, STDOUT_FILENO);
+    }
+
+    // Send stderr
+    if (atty & ATTY_ERR) {
+        // Using PTY
+        send_fd(socketfd, -1);
+    } else {
+        send_fd(socketfd, STDERR_FILENO);
+    }
+
+    // Command line arguments
+    int i;
+    for (i = 0; i < argc; i++) {
+        write_string(socketfd, argv[i]);
+    }
+
+    // Wait for acknowledgement from daemon
+    read_int(socketfd);
+
+    if (atty & ATTY_IN) {
+        setup_sighandlers();
+        pump_stdin_async(ptmx);
+    }
+    if (atty & ATTY_OUT) {
+        pump_stdout_blocking(ptmx);
+    }
+
+    // Get the exit code
+    int code = read_int(socketfd);
+    close(socketfd);
+    ALOGD("client exited %d", code);
+
+    return code;
+}
diff --git a/su/policy b/su/policy
new file mode 100644
index 0000000000000000000000000000000000000000..74be819a9fc07faecb0d5fa94557edf7cd5c776f
GIT binary patch
literal 411698
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

literal 0
HcmV?d00001

diff --git a/su/pts.c b/su/pts.c
new file mode 100644
index 0000000..392725d
--- /dev/null
+++ b/su/pts.c
@@ -0,0 +1,334 @@
+/*
+ * Copyright 2013, Tan Chee Eng (@tan-ce)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+ /*
+ * pts.c
+ *
+ * Manages the pseudo-terminal driver on Linux/Android and provides some
+ * helper functions to handle raw input mode and terminal window resizing
+ */
+
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <signal.h>
+#include <termios.h>
+#include <errno.h>
+#include <pthread.h>
+
+#include "pts.h"
+
+/**
+ * Helper functions
+ */
+// Ensures all the data is written out
+static int write_blocking(int fd, char* buf, size_t bufsz) {
+    ssize_t ret, written;
+
+    written = 0;
+    do {
+        ret = write(fd, buf + written, bufsz - written);
+        if (ret == -1) return -1;
+        written += ret;
+    } while (written < (ssize_t)bufsz);
+
+    return 0;
+}
+
+/**
+ * Pump data from input FD to output FD. If close_output is
+ * true, then close the output FD when we're done.
+ */
+static void pump_ex(int input, int output, int close_output) {
+    char buf[4096];
+    int len;
+    while ((len = read(input, buf, 4096)) > 0) {
+        if (write_blocking(output, buf, len) == -1) break;
+    }
+    close(input);
+    if (close_output) close(output);
+}
+
+/**
+ * Pump data from input FD to output FD. Will close the
+ * output FD when done.
+ */
+static void pump(int input, int output) {
+    pump_ex(input, output, 1);
+}
+
+static void* pump_thread(void* data) {
+    int* files = (int*)data;
+    int input = files[0];
+    int output = files[1];
+    pump(input, output);
+    free(data);
+    return NULL;
+}
+
+static void pump_async(int input, int output) {
+    pthread_t writer;
+    int* files = (int*)malloc(sizeof(int) * 2);
+    if (files == NULL) {
+        exit(-1);
+    }
+    files[0] = input;
+    files[1] = output;
+    pthread_create(&writer, NULL, pump_thread, files);
+}
+
+
+/**
+ * pts_open
+ *
+ * Opens a pts device and returns the name of the slave tty device.
+ *
+ * Arguments
+ * slave_name       the name of the slave device
+ * slave_name_size  the size of the buffer passed via slave_name
+ *
+ * Return Values
+ * on failure either -2 or -1 (errno set) is returned.
+ * on success, the file descriptor of the master device is returned.
+ */
+int pts_open(char* slave_name, size_t slave_name_size) {
+    int fdm;
+    char sn_tmp[slave_name_size];
+
+    // Open master ptmx device
+    fdm = open("/dev/ptmx", O_RDWR);
+    if (fdm == -1) return -1;
+
+    // Get the slave name
+    if (ptsname_r(fdm, sn_tmp, slave_name_size) != 0) {
+        close(fdm);
+        return -2;
+    }
+
+    if (strlcpy(slave_name, sn_tmp, slave_name_size) >= slave_name_size) {
+        return -1;
+    }
+
+    // Grant, then unlock
+    if (grantpt(fdm) == -1) {
+        close(fdm);
+        return -1;
+    }
+    if (unlockpt(fdm) == -1) {
+        close(fdm);
+        return -1;
+    }
+
+    return fdm;
+}
+
+// Stores the previous termios of stdin
+static struct termios old_stdin;
+static int stdin_is_raw = 0;
+
+/**
+ * set_stdin_raw
+ *
+ * Changes stdin to raw unbuffered mode, disables echo, 
+ * auto carriage return, etc.
+ *
+ * Return Value
+ * on failure -1, and errno is set
+ * on success 0
+ */
+int set_stdin_raw(void) {
+    struct termios new_termios;
+
+    // Save the current stdin termios
+    if (tcgetattr(STDIN_FILENO, &old_stdin) < 0) {
+        return -1;
+    }
+
+    // Start from the current settings
+    new_termios = old_stdin;
+
+    // Make the terminal like an SSH or telnet client
+    new_termios.c_iflag |= IGNPAR;
+    new_termios.c_iflag &= ~(ISTRIP | INLCR | IGNCR | ICRNL | IXON | IXANY | IXOFF);
+    new_termios.c_lflag &= ~(ISIG | ICANON | ECHO | ECHOE | ECHOK | ECHONL);
+    new_termios.c_oflag &= ~OPOST;
+    new_termios.c_cc[VMIN] = 1;
+    new_termios.c_cc[VTIME] = 0;
+
+    if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &new_termios) < 0) {
+        return -1;
+    }
+
+    stdin_is_raw = 1;
+
+    return 0;
+}
+
+/**
+ * restore_stdin
+ *
+ * Restore termios on stdin to the state it was before
+ * set_stdin_raw() was called. If set_stdin_raw() was
+ * never called, does nothing and doesn't return an error.
+ *
+ * This function is async-safe.
+ *
+ * Return Value
+ * on failure, -1 and errno is set
+ * on success, 0
+ */
+int restore_stdin(void) {
+    if (!stdin_is_raw) return 0;
+
+    if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &old_stdin) < 0) {
+        return -1;
+    }
+
+    stdin_is_raw = 0;
+
+    return 0;
+}
+
+// Flag indicating whether the sigwinch watcher should terminate.
+static volatile int closing_time = 0;
+
+/**
+ * Thread process. Wait for a SIGWINCH to be received, then update 
+ * the terminal size.
+ */
+static void* watch_sigwinch(void* data) {
+    sigset_t winch;
+    int sig;
+    int master = ((int *)data)[0];
+    int slave = ((int *)data)[1];
+
+    sigemptyset(&winch);
+    sigaddset(&winch, SIGWINCH);
+
+    do {
+        // Wait for a SIGWINCH
+        sigwait(&winch, &sig);
+
+        if (closing_time) break;
+
+        // Get the new terminal size
+        struct winsize w;
+        if (ioctl(master, TIOCGWINSZ, &w) == -1) {
+            continue;
+        }
+
+        // Set the new terminal size
+        ioctl(slave, TIOCSWINSZ, &w);
+
+    } while (sigwait(&winch, &sig) == 0);
+
+    free(data);
+    return NULL;
+}
+
+/**
+ * watch_sigwinch_async
+ *
+ * After calling this function, if the application receives
+ * SIGWINCH, the terminal window size will be read from 
+ * "input" and set on "output".
+ *
+ * NOTE: This function blocks SIGWINCH and spawns a thread.
+ * NOTE 2: This function must be called before any of the
+ *         pump functions.
+ *
+ * Arguments
+ * master   A file descriptor of the TTY window size to follow
+ * slave    A file descriptor of the TTY window size which is
+ *          to be set on SIGWINCH
+ *
+ * Return Value
+ * on failure, -1 and errno will be set. In this case, no
+ *      thread has been spawned and SIGWINCH will not be 
+ *      blocked.
+ * on success, 0
+ */
+int watch_sigwinch_async(int master, int slave) {
+    pthread_t watcher;
+    int* files = (int*) malloc(sizeof(int) * 2);
+    if (files == NULL) {
+        return -1;
+    }
+
+    // Block SIGWINCH so sigwait can later receive it
+    sigset_t winch;
+    sigemptyset(&winch);
+    sigaddset(&winch, SIGWINCH);
+    if (sigprocmask(SIG_BLOCK, &winch, NULL) == -1) {
+        free(files);
+        return -1;
+    }
+
+    // Initialize some variables, then start the thread
+    closing_time = 0;
+    files[0] = master;
+    files[1] = slave;
+    int ret = pthread_create(&watcher, NULL, &watch_sigwinch, files);
+    if (ret != 0) {
+        free(files);
+        errno = ret;
+        return -1;
+    }
+
+    return 0;
+}
+
+/**
+ * watch_sigwinch_cleanup
+ *
+ * Cause the SIGWINCH watcher thread to terminate
+ */
+void watch_sigwinch_cleanup(void) {
+    closing_time = 1;
+    raise(SIGWINCH);
+}
+
+/**
+ * pump_stdin_async
+ *
+ * Forward data from STDIN to the given FD
+ * in a seperate thread
+ */
+void pump_stdin_async(int outfd) {
+    // Put stdin into raw mode
+    set_stdin_raw();
+
+    // Pump data from stdin to the PTY
+    pump_async(STDIN_FILENO, outfd);
+}
+
+/**
+ * pump_stdout_blocking
+ *
+ * Forward data from the FD to STDOUT.
+ * Returns when the remote end of the FD closes.
+ *
+ * Before returning, restores stdin settings.
+ */
+void pump_stdout_blocking(int infd) {
+    // Pump data from stdout to PTY
+    pump_ex(infd, STDOUT_FILENO, 0 /* Don't close output when done */);
+
+    // Cleanup
+    restore_stdin();
+    watch_sigwinch_cleanup();
+}
diff --git a/su/pts.h b/su/pts.h
new file mode 100644
index 0000000..93e40c8
--- /dev/null
+++ b/su/pts.h
@@ -0,0 +1,116 @@
+/*
+ * Copyright 2013, Tan Chee Eng (@tan-ce)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+ /*
+ * pts.h
+ *
+ * Manages the pseudo-terminal driver on Linux/Android and provides some
+ * helper functions to handle raw input mode and terminal window resizing
+ */
+
+#ifndef _PTS_H_
+#define _PTS_H_
+
+/**
+ * pts_open
+ *
+ * Opens a pts device and returns the name of the slave tty device.
+ *
+ * Arguments
+ * slave_name       the name of the slave device
+ * slave_name_size  the size of the buffer passed via slave_name
+ *
+ * Return Values
+ * on failure either -2 or -1 (errno set) is returned.
+ * on success, the file descriptor of the master device is returned.
+ */
+int pts_open(char* slave_name, size_t slave_name_size);
+
+/**
+ * set_stdin_raw
+ *
+ * Changes stdin to raw unbuffered mode, disables echo, 
+ * auto carriage return, etc.
+ *
+ * Return Value
+ * on failure -1, and errno is set
+ * on success 0
+ */
+int set_stdin_raw(void);
+
+/**
+ * restore_stdin
+ *
+ * Restore termios on stdin to the state it was before
+ * set_stdin_raw() was called. If set_stdin_raw() was
+ * never called, does nothing and doesn't return an error.
+ *
+ * This function is async-safe.
+ *
+ * Return Value
+ * on failure, -1 and errno is set
+ * on success, 0
+ */
+int restore_stdin(void);
+
+/**
+ * watch_sigwinch_async
+ *
+ * After calling this function, if the application receives
+ * SIGWINCH, the terminal window size will be read from 
+ * "input" and set on "output".
+ *
+ * NOTE: This function blocks SIGWINCH and spawns a thread.
+ *
+ * Arguments
+ * master   A file descriptor of the TTY window size to follow
+ * slave    A file descriptor of the TTY window size which is
+ *          to be set on SIGWINCH
+ *
+ * Return Value
+ * on failure, -1 and errno will be set. In this case, no
+ *      thread has been spawned and SIGWINCH will not be 
+ *      blocked.
+ * on success, 0
+ */
+int watch_sigwinch_async(int master, int slave);
+
+/**
+ * watch_sigwinch_cleanup
+ *
+ * Cause the SIGWINCH watcher thread to terminate
+ */
+void watch_sigwinch_cleanup(void);
+
+/**
+ * pump_stdin_async
+ *
+ * Forward data from STDIN to the given FD
+ * in a seperate thread
+ */
+void pump_stdin_async(int outfd);
+
+/**
+ * pump_stdout_blocking
+ *
+ * Forward data from the FD to STDOUT.
+ * Returns when the remote end of the FD closes.
+ *
+ * Before returning, restores stdin settings.
+ */
+void pump_stdout_blocking(int infd);
+
+#endif
diff --git a/su/su.c b/su/su.c
new file mode 100644
index 0000000..368fe85
--- /dev/null
+++ b/su/su.c
@@ -0,0 +1,519 @@
+/*
+** Copyright 2010, Adam Shanks (@ChainsDD)
+** Copyright 2008, Zinx Verituse (@zinxv)
+** Copyright 2017-2018, The LineageOS Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+#define LOG_NDEBUG 0
+#include <getopt.h>
+#include <pwd.h>
+#include <stdlib.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <unistd.h>
+
+#include <cutils/properties.h>
+#include <log/log.h>
+#include <private/android_filesystem_config.h>
+
+#include "su.h"
+#include "utils.h"
+#include "binder/pm-wrapper.h"
+
+extern int is_daemon;
+extern int daemon_from_uid;
+extern int daemon_from_pid;
+
+int fork_zero_fucks() {
+    int pid = fork();
+    if (pid) {
+        int status;
+        waitpid(pid, &status, 0);
+        return pid;
+    }
+    else {
+        if ((pid = fork()))
+            exit(0);
+        return 0;
+    }
+}
+
+static int from_init(struct su_initiator* from) {
+    char path[PATH_MAX], exe[PATH_MAX];
+    char args[4096], *argv0, *argv_rest;
+    int fd;
+    ssize_t len;
+    int i;
+    int err;
+
+    from->uid = getuid();
+    from->pid = getppid();
+
+    if (is_daemon) {
+        from->uid = daemon_from_uid;
+        from->pid = daemon_from_pid;
+    }
+
+    /* Get the command line */
+    snprintf(path, sizeof(path), "/proc/%d/cmdline", from->pid);
+    fd = open(path, O_RDONLY);
+    if (fd < 0) {
+        PLOGE("Opening command line");
+        return -1;
+    }
+    len = read(fd, args, sizeof(args));
+    err = errno;
+    close(fd);
+    if (len < 0 || len == sizeof(args)) {
+        PLOGEV("Reading command line", err);
+        return -1;
+    }
+
+    argv0 = args;
+    argv_rest = NULL;
+    for (i = 0; i < len; i++) {
+        if (args[i] == '\0') {
+            if (!argv_rest) {
+                argv_rest = &args[i+1];
+            } else {
+                args[i] = ' ';
+            }
+        }
+    }
+    args[len] = '\0';
+
+    if (argv_rest) {
+        if (strlcpy(from->args, argv_rest, sizeof(from->args)) >= sizeof(from->args)) {
+            ALOGE("argument too long");
+            return -1;
+        }
+    } else {
+        from->args[0] = '\0';
+    }
+
+    /* If this isn't app_process, use the real path instead of argv[0] */
+    snprintf(path, sizeof(path), "/proc/%d/exe", from->pid);
+    len = readlink(path, exe, sizeof(exe));
+    if (len < 0) {
+        PLOGE("Getting exe path");
+        return -1;
+    }
+    exe[len] = '\0';
+    if (strcmp(exe, "/system/bin/app_process") != 0) {
+        argv0 = exe;
+    }
+
+    if (strlcpy(from->bin, argv0, sizeof(from->bin)) >= sizeof(from->bin)) {
+        ALOGE("binary path too long");
+        return -1;
+    }
+
+    struct passwd* pw;
+    pw = getpwuid(from->uid);
+    if (pw && pw->pw_name) {
+        if (strlcpy(from->name, pw->pw_name, sizeof(from->name)) >= sizeof(from->name)) {
+            ALOGE("name too long");
+            return -1;
+        }
+    }
+
+    return 0;
+}
+
+static void populate_environment(const struct su_context* ctx) {
+    struct passwd* pw;
+
+    if (ctx->to.keepenv)
+        return;
+
+    pw = getpwuid(ctx->to.uid);
+    if (pw) {
+        setenv("HOME", pw->pw_dir, 1);
+        if (ctx->to.shell)
+            setenv("SHELL", ctx->to.shell, 1);
+        else
+            setenv("SHELL", DEFAULT_SHELL, 1);
+        if (ctx->to.login || ctx->to.uid) {
+            setenv("USER", pw->pw_name, 1);
+            setenv("LOGNAME", pw->pw_name, 1);
+        }
+    }
+}
+
+void set_identity(unsigned int uid) {
+    /*
+     * Set effective uid back to root, otherwise setres[ug]id will fail
+     * if uid isn't root.
+     */
+    if (seteuid(0)) {
+        PLOGE("seteuid (root)");
+        exit(EXIT_FAILURE);
+    }
+    if (setresgid(uid, uid, uid)) {
+        PLOGE("setresgid (%u)", uid);
+        exit(EXIT_FAILURE);
+    }
+    if (setresuid(uid, uid, uid)) {
+        PLOGE("setresuid (%u)", uid);
+        exit(EXIT_FAILURE);
+    }
+}
+
+static void usage(int status) {
+    FILE* stream = (status == EXIT_SUCCESS) ? stdout : stderr;
+
+    fprintf(stream,
+    "Usage: su [options] [--] [-] [LOGIN] [--] [args...]\n\n"
+    "Options:\n"
+    "  --daemon                      start the su daemon agent\n"
+    "  -c, --command COMMAND         pass COMMAND to the invoked shell\n"
+    "  -h, --help                    display this help message and exit\n"
+    "  -, -l, --login                pretend the shell to be a login shell\n"
+    "  -m, -p,\n"
+    "  --preserve-environment        do not change environment variables\n"
+    "  -s, --shell SHELL             use SHELL instead of the default " DEFAULT_SHELL "\n"
+    "  -v, --version                 display version number and exit\n"
+    "  -V                            display version code and exit,\n"
+    "                                this is used almost exclusively by Superuser.apk\n");
+    exit(status);
+}
+
+static __attribute__ ((noreturn)) void deny(struct su_context* ctx) {
+    char* cmd = get_command(&ctx->to);
+    ALOGW("request rejected (%u->%u %s)", ctx->from.uid, ctx->to.uid, cmd);
+    fprintf(stderr, "%s\n", strerror(EACCES));
+    exit(EXIT_FAILURE);
+}
+
+static __attribute__ ((noreturn)) void allow(struct su_context* ctx, const char* packageName) {
+    char* arg0;
+    int argc, err;
+
+    umask(ctx->umask);
+
+    char* binary;
+    argc = ctx->to.optind;
+    if (ctx->to.command) {
+        binary = ctx->to.shell;
+        ctx->to.argv[--argc] = ctx->to.command;
+        ctx->to.argv[--argc] = "-c";
+    }
+    else if (ctx->to.shell) {
+        binary = ctx->to.shell;
+    }
+    else {
+        if (ctx->to.argv[argc]) {
+            binary = ctx->to.argv[argc++];
+        }
+        else {
+            binary = DEFAULT_SHELL;
+        }
+    }
+
+    arg0 = strrchr (binary, '/');
+    arg0 = (arg0) ? arg0 + 1 : binary;
+    if (ctx->to.login) {
+        int s = strlen(arg0) + 2;
+        char* p = malloc(s);
+
+        if (!p)
+            exit(EXIT_FAILURE);
+
+        *p = '-';
+        strlcpy(p + 1, arg0, s-2);
+        arg0 = p;
+    }
+
+    populate_environment(ctx);
+    set_identity(ctx->to.uid);
+
+#define PARG(arg)                                    \
+    (argc + (arg) < ctx->to.argc) ? " " : "",                    \
+    (argc + (arg) < ctx->to.argc) ? ctx->to.argv[argc + (arg)] : ""
+
+    ALOGD("%u %s executing %u %s using binary %s : %s%s%s%s%s%s%s%s%s%s%s%s%s%s",
+            ctx->from.uid, ctx->from.bin,
+            ctx->to.uid, get_command(&ctx->to), binary,
+            arg0, PARG(0), PARG(1), PARG(2), PARG(3), PARG(4), PARG(5),
+            (ctx->to.optind + 6 < ctx->to.argc) ? " ..." : "");
+
+    ctx->to.argv[--argc] = arg0;
+
+    int pid = fork();
+    if (!pid) {
+        execvp(binary, ctx->to.argv + argc);
+        err = errno;
+        PLOGE("exec");
+        fprintf(stderr, "Cannot execute %s: %s\n", binary, strerror(err));
+        exit(EXIT_FAILURE);
+    } else {
+        int status, code;
+
+        ALOGD("Waiting for pid %d.", pid);
+        waitpid(pid, &status, 0);
+        ALOGD("pid %d returned %d.", pid, status);
+        code = WIFSIGNALED(status) ? WTERMSIG(status) + 128 : WEXITSTATUS(status);
+
+        if (packageName) {
+            appops_finish_op_su(ctx->from.uid, packageName);
+        }
+        exit(code);
+    }
+}
+
+/*
+ * Lineage-specific behavior
+ *
+ * we can't simply use the property service, since we aren't launched from init
+ * and can't trust the location of the property workspace.
+ * Find the properties ourselves.
+ */
+int access_disabled(const struct su_initiator* from) {
+	//char lineage_version[PROPERTY_VALUE_MAX];
+    char build_type[PROPERTY_VALUE_MAX];
+    int enabled;
+
+    /* Only allow su on Lineage builds */
+    //property_get("ro.lineage.version", lineage_version, "");
+    //if (!strcmp(lineage_version, "")) {
+    //    ALOGE("Root access disabled on Non-Lineage builds");
+    //    return 1;
+   // }
+
+    /* Only allow su on debuggable builds */
+    if (!property_get_bool("ro.debuggable", false)) {
+        ALOGE("Root access is disabled on non-debug builds");
+        return 1;
+    }
+
+    /* Enforce persist.sys.root_access on non-eng builds for apps */
+    enabled = property_get_int32("persist.sys.root_access", 2);
+    property_get("ro.build.type", build_type, "");
+    if (strcmp("eng", build_type) != 0 && from->uid != AID_SHELL && from->uid != AID_ROOT &&
+		(enabled & LINEAGE_ROOT_ACCESS_APPS_ONLY) != LINEAGE_ROOT_ACCESS_APPS_ONLY) {
+		ALOGE(
+            "Apps root access is disabled by system setting - "
+            "enable it under settings -> developer options");
+        return 1;
+    }
+
+    /* disallow su in a shell if appropriate */
+    if (from->uid == AID_SHELL &&
+		(enabled & LINEAGE_ROOT_ACCESS_ADB_ONLY) != LINEAGE_ROOT_ACCESS_ADB_ONLY) {
+        ALOGE(
+            "Shell root access is disabled by a system setting - "
+            "enable it under settings -> developer options");
+        return 1;
+    }
+
+    return 0;
+}
+
+int main(int argc, char* argv[]) {
+    if (getuid() != geteuid()) {
+        ALOGE("HACK:must not be a setuid binary");
+        return 1;
+    }
+
+    return su_main(argc, argv, 0);
+}
+
+int su_main(int argc, char* argv[], int need_client) {
+    ALOGE("HACK: start su_main");
+    // start up in daemon mode if prompted
+    if (argc == 2 && strcmp(argv[1], "--daemon") == 0) {
+        ALOGE("HACK: start su_main in daemon mode");
+        return run_daemon();
+    }
+
+    int ppid = getppid();
+
+    // Sanitize all secure environment variables (from linker_environ.c in AOSP linker).
+    /* The same list than GLibc at this point */
+    static const char* const unsec_vars[] = {
+        "GCONV_PATH",
+        "GETCONF_DIR",
+        "HOSTALIASES",
+        "LD_AUDIT",
+        "LD_DEBUG",
+        "LD_DEBUG_OUTPUT",
+        "LD_DYNAMIC_WEAK",
+        "LD_LIBRARY_PATH",
+        "LD_ORIGIN_PATH",
+        "LD_PRELOAD",
+        "LD_PROFILE",
+        "LD_SHOW_AUXV",
+        "LD_USE_LOAD_BIAS",
+        "LOCALDOMAIN",
+        "LOCPATH",
+        "MALLOC_TRACE",
+        "MALLOC_CHECK_",
+        "NIS_PATH",
+        "NLSPATH",
+        "RESOLV_HOST_CONF",
+        "RES_OPTIONS",
+        "TMPDIR",
+        "TZDIR",
+        "LD_AOUT_LIBRARY_PATH",
+        "LD_AOUT_PRELOAD",
+        // not listed in linker, used due to system() call
+        "IFS",
+    };
+    const char* const* cp   = unsec_vars;
+    const char* const* endp = cp + sizeof(unsec_vars)/sizeof(unsec_vars[0]);
+    while (cp < endp) {
+        unsetenv(*cp);
+        cp++;
+    }
+
+    ALOGE("HACK: su invoked");
+    ALOGD("su invoked.");
+
+    struct su_context ctx = {
+        .from = {
+            .pid = -1,
+            .uid = 0,
+            .bin = "",
+            .args = "",
+            .name = "",
+        },
+        .to = {
+            .uid = AID_ROOT,
+            .login = 0,
+            .keepenv = 0,
+            .shell = NULL,
+            .command = NULL,
+            .argv = argv,
+            .argc = argc,
+            .optind = 0,
+            .name = "",
+        },
+    };
+    int c;
+    struct option long_opts[] = {
+        { "command",            required_argument,    NULL, 'c' },
+        { "help",            no_argument,        NULL, 'h' },
+        { "login",            no_argument,        NULL, 'l' },
+        { "preserve-environment",    no_argument,        NULL, 'p' },
+        { "shell",            required_argument,    NULL, 's' },
+        { "version",            no_argument,        NULL, 'v' },
+        { NULL, 0, NULL, 0 },
+    };
+
+    while ((c = getopt_long(argc, argv, "+c:hlmps:Vv", long_opts, NULL)) != -1) {
+        ALOGE("HACK: while loop:%d",c);
+        switch(c) {
+        case 'c':
+            ctx.to.shell = DEFAULT_SHELL;
+            ctx.to.command = optarg;
+            break;
+        case 'h':
+            usage(EXIT_SUCCESS);
+            break;
+        case 'l':
+            ctx.to.login = 1;
+            break;
+        case 'm':
+        case 'p':
+            ctx.to.keepenv = 1;
+            break;
+        case 's':
+            ctx.to.shell = optarg;
+            break;
+        case 'V':
+            printf("%d\n", VERSION_CODE);
+            exit(EXIT_SUCCESS);
+        case 'v':
+            printf("%s\n", VERSION);
+            exit(EXIT_SUCCESS);
+        default:
+            /* Bionic getopt_long doesn't terminate its error output by newline */
+            fprintf(stderr, "\n");
+            usage(2);
+        }
+    }
+
+    if (need_client) {
+        // attempt to connect to daemon...
+        ALOGE("HACK: starting deamon client");
+        ALOGD("starting daemon client %d %d", getuid(), geteuid());
+        return connect_daemon(argc, argv, ppid);
+    }
+
+    if (optind < argc && !strcmp(argv[optind], "-")) {
+        ctx.to.login = 1;
+        optind++;
+    }
+    /* username or uid */
+    if (optind < argc && strcmp(argv[optind], "--") != 0) {
+        struct passwd *pw;
+        pw = getpwnam(argv[optind]);
+        if (!pw) {
+            char *endptr;
+
+            /* It seems we shouldn't do this at all */
+            errno = 0;
+            ctx.to.uid = strtoul(argv[optind], &endptr, 10);
+            if (errno || *endptr) {
+                ALOGE("HACK: Unknown id: %s\n", argv[optind]);
+                fprintf(stderr, "Unknown id: %s\n", argv[optind]);
+                exit(EXIT_FAILURE);
+            }
+        } else {
+            ctx.to.uid = pw->pw_uid;
+            if (pw->pw_name) {
+                if (strlcpy(ctx.to.name, pw->pw_name, sizeof(ctx.to.name)) >= sizeof(ctx.to.name)) {
+                    ALOGE("name too long");
+                    exit(EXIT_FAILURE);
+                }
+            }
+        }
+        optind++;
+    }
+    if (optind < argc && !strcmp(argv[optind], "--")) {
+        optind++;
+    }
+    ctx.to.optind = optind;
+
+    if (from_init(&ctx.from) < 0) {
+        deny(&ctx);
+    }
+
+    ALOGE("HACK: SU from: %s", ctx.from.name);
+
+    // check if superuser is disabled completely
+    if (access_disabled(&ctx.from)) {
+        ALOGD("access_disabled");
+        deny(&ctx);
+    }
+
+    // autogrant shell at this point
+    if (ctx.from.uid == AID_SHELL) {
+        ALOGD("Allowing shell.");
+        allow(&ctx, NULL);
+    }
+
+    char *packageName = resolve_package_name(ctx.from.uid);
+    if (packageName) {
+        if (!appops_start_op_su(ctx.from.uid, packageName)) {
+            ALOGD("Allowing via appops.");
+            allow(&ctx, packageName);
+        }
+        free(packageName);
+    }
+
+    ALOGE("Allow chain exhausted, denying request");
+    deny(&ctx);
+}
diff --git a/su/su.cpp b/su/su.cpp
deleted file mode 100644
index f3e4ff0..0000000
--- a/su/su.cpp
+++ /dev/null
@@ -1,144 +0,0 @@
-/*
- * Copyright (C) 2008 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <errno.h>
-#include <error.h>
-#include <getopt.h>
-#include <paths.h>
-#include <pwd.h>
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <unistd.h>
-
-#include <private/android_filesystem_config.h>
-
-void pwtoid(const char* tok, uid_t* uid, gid_t* gid) {
-    struct passwd* pw = getpwnam(tok);
-    if (pw) {
-        if (uid) *uid = pw->pw_uid;
-        if (gid) *gid = pw->pw_gid;
-    } else {
-        char* end;
-        errno = 0;
-        uid_t tmpid = strtoul(tok, &end, 10);
-        if (errno != 0 || end == tok) error(1, errno, "invalid uid/gid '%s'", tok);
-        if (uid) *uid = tmpid;
-        if (gid) *gid = tmpid;
-    }
-}
-
-void extract_uidgids(const char* uidgids, uid_t* uid, gid_t* gid, gid_t* gids, int* gids_count) {
-    char *clobberablegids;
-    char *nexttok;
-    char *tok;
-    int gids_found;
-
-    if (!uidgids || !*uidgids) {
-        *gid = *uid = 0;
-        *gids_count = 0;
-        return;
-    }
-
-    clobberablegids = strdup(uidgids);
-    strcpy(clobberablegids, uidgids);
-    nexttok = clobberablegids;
-    tok = strsep(&nexttok, ",");
-    pwtoid(tok, uid, gid);
-    tok = strsep(&nexttok, ",");
-    if (!tok) {
-        /* gid is already set above */
-        *gids_count = 0;
-        free(clobberablegids);
-        return;
-    }
-    pwtoid(tok, NULL, gid);
-    gids_found = 0;
-    while ((gids_found < *gids_count) && (tok = strsep(&nexttok, ","))) {
-        pwtoid(tok, NULL, gids);
-        gids_found++;
-        gids++;
-    }
-    if (nexttok && gids_found == *gids_count) {
-        fprintf(stderr, "too many group ids\n");
-    }
-    *gids_count = gids_found;
-    free(clobberablegids);
-}
-
-int main(int argc, char** argv) {
-    uid_t current_uid = getuid();
-    if (current_uid != AID_ROOT && current_uid != AID_SHELL) error(1, 0, "not allowed");
-
-    // Handle -h and --help.
-    ++argv;
-    if (*argv && (strcmp(*argv, "--help") == 0 || strcmp(*argv, "-h") == 0)) {
-        fprintf(stderr,
-                "usage: su [UID[,GID[,GID2]...]] [COMMAND [ARG...]]\n"
-                "\n"
-                "Switch to WHO (default 'root') and run the given command (default sh).\n"
-                "\n"
-                "where WHO is a comma-separated list of user, group,\n"
-                "and supplementary groups in that order.\n"
-                "\n");
-        return 0;
-    }
-
-    // The default user is root.
-    uid_t uid = 0;
-    gid_t gid = 0;
-
-    // If there are any arguments, the first argument is the uid/gid/supplementary groups.
-    if (*argv) {
-        gid_t gids[10];
-        int gids_count = sizeof(gids)/sizeof(gids[0]);
-        extract_uidgids(*argv, &uid, &gid, gids, &gids_count);
-        if (gids_count) {
-            if (setgroups(gids_count, gids)) {
-                error(1, errno, "setgroups failed");
-            }
-        }
-        ++argv;
-    }
-
-    if (setgid(gid)) error(1, errno, "setgid failed");
-    if (setuid(uid)) error(1, errno, "setuid failed");
-
-    // Reset parts of the environment.
-    setenv("PATH", _PATH_DEFPATH, 1);
-    unsetenv("IFS");
-    struct passwd* pw = getpwuid(uid);
-    if (pw) {
-        setenv("LOGNAME", pw->pw_name, 1);
-        setenv("USER", pw->pw_name, 1);
-    } else {
-        unsetenv("LOGNAME");
-        unsetenv("USER");
-    }
-
-    // Set up the arguments for exec.
-    char* exec_args[argc + 1];  // Having too much space is fine.
-    size_t i = 0;
-    for (; *argv != NULL; ++i) {
-      exec_args[i] = *argv++;
-    }
-    // Default to the standard shell.
-    if (i == 0) exec_args[i++] = const_cast<char*>("/system/bin/sh");
-    exec_args[i] = NULL;
-
-    execvp(exec_args[0], exec_args);
-    error(1, errno, "failed to exec %s", exec_args[0]);
-}
diff --git a/su/su.h b/su/su.h
new file mode 100644
index 0000000..6b91bc8
--- /dev/null
+++ b/su/su.h
@@ -0,0 +1,115 @@
+/*
+** Copyright 2010, Adam Shanks (@ChainsDD)
+** Copyright 2008, Zinx Verituse (@zinxv)
+** Copyright 2017-2018, The LineageOS Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+
+#ifndef SU_h 
+#define SU_h 1
+
+#ifdef LOG_TAG
+#undef LOG_TAG
+#endif
+#define LOG_TAG "su"
+
+// Lineage-specific behavior
+#define LINEAGE_ROOT_ACCESS_DISABLED      0
+#define LINEAGE_ROOT_ACCESS_APPS_ONLY     1
+#define LINEAGE_ROOT_ACCESS_ADB_ONLY      2
+#define LINEAGE_ROOT_ACCESS_APPS_AND_ADB  3
+
+#define DAEMON_SOCKET_PATH "/dev/socket/su-daemon/"
+
+#define DEFAULT_SHELL "/system/bin/sh"
+
+#define xstr(a) str(a)
+#define str(a) #a
+
+#ifndef VERSION_CODE
+#define VERSION_CODE 16
+#endif
+#define VERSION xstr(VERSION_CODE) " cm-su"
+
+#define PROTO_VERSION 1
+
+struct su_initiator {
+    pid_t pid;
+    unsigned uid;
+    unsigned user;
+    char name[64];
+    char bin[PATH_MAX];
+    char args[4096];
+};
+
+struct su_request {
+    unsigned uid;
+    char name[64];
+    int login;
+    int keepenv;
+    char* shell;
+    char* command;
+    char** argv;
+    int argc;
+    int optind;
+};
+
+struct su_context {
+    struct su_initiator from;
+    struct su_request to;
+    mode_t umask;
+    char sock_path[PATH_MAX];
+};
+
+typedef enum {
+    INTERACTIVE = 0,
+    DENY = 1,
+    ALLOW = 2,
+} policy_t;
+
+extern void set_identity(unsigned int uid);
+
+static inline char* get_command(const struct su_request* to)
+{
+  if (to->command)
+    return to->command;
+  if (to->shell)
+    return to->shell;
+  char* ret = to->argv[to->optind];
+  if (ret)
+    return ret;
+  return DEFAULT_SHELL;
+}
+
+int appops_start_op_su(int uid, const char* pkgName);
+int appops_finish_op_su(int uid, const char* pkgName);
+
+int run_daemon();
+int connect_daemon(int argc, char* argv[], int ppid);
+int su_main(int argc, char* argv[], int need_client);
+// for when you give zero fucks about the state of the child process.
+// this version of fork understands you don't care about the child.
+// deadbeat dad fork.
+int fork_zero_fucks();
+
+#ifndef LOG_NDEBUG
+#define LOG_NDEBUG 1
+#endif
+
+#include <errno.h>
+#include <string.h>
+#define PLOGE(fmt,args...) ALOGE(fmt " failed with %d: %s", ##args, errno, strerror(errno))
+#define PLOGEV(fmt,err,args...) ALOGE(fmt " failed with %d: %s", ##args, err, strerror(err))
+
+#endif
diff --git a/su/superuser.rc b/su/superuser.rc
new file mode 100644
index 0000000..0c0717e
--- /dev/null
+++ b/su/superuser.rc
@@ -0,0 +1,18 @@
+# su daemon
+service su_daemon /system/xbin/su --daemon
+    user root
+    group root
+    disabled
+    seclabel u:r:sudaemon:s0
+
+on property:persist.sys.root_access=0
+    stop su_daemon
+
+on property:persist.sys.root_access=2
+    stop su_daemon
+
+on property:persist.sys.root_access=1
+    start su_daemon
+
+on property:persist.sys.root_access=3
+    start su_daemon
diff --git a/su/utils.c b/su/utils.c
new file mode 100644
index 0000000..81fee49
--- /dev/null
+++ b/su/utils.c
@@ -0,0 +1,54 @@
+/*
+** Copyright 2012, The CyanogenMod Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <unistd.h>
+#include <limits.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <ctype.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "utils.h"
+
+/* reads a file, making sure it is terminated with \n \0 */
+char* read_file(const char* fn)
+{
+    struct stat st;
+    char* data = NULL;
+
+    int fd = open(fn, O_RDONLY);
+    if (fd < 0) return data;
+
+    if (fstat(fd, &st)) goto oops;
+
+    data = malloc(st.st_size + 2);
+    if (!data) goto oops;
+
+    if (read(fd, data, st.st_size) != st.st_size) goto oops;
+    close(fd);
+    data[st.st_size] = '\n';
+    data[st.st_size + 1] = 0;
+    return data;
+
+oops:
+    close(fd);
+    if (data) free(data);
+    return NULL;
+}
diff --git a/su/utils.h b/su/utils.h
new file mode 100644
index 0000000..ed4a5ef
--- /dev/null
+++ b/su/utils.h
@@ -0,0 +1,27 @@
+/*
+** Copyright 2012, The CyanogenMod Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+
+#ifndef _UTILS_H_
+#define _UTILS_H_
+
+#ifndef PROPERTY_VALUE_MAX
+#define PROPERTY_VALUE_MAX  92
+#endif
+
+/* reads a file, making sure it is terminated with \n \0 */
+extern char* read_file(const char* fn);
+
+#endif
-- 
2.7.4

